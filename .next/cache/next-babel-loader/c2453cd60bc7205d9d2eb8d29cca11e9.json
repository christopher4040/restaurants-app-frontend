{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/chris/Bootcamp/Restaurant-App/frontend/components/dishes.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: ID!) {\\n    restaurant(id: $id) {\\n      data {\\n        id\\n        attributes {\\n          name\\n          dishes {\\n            data {\\n              id\\n              attributes {\\n                name\\n                description\\n                price\\n                image {\\n                  data {\\n                    attributes {\\n                      url\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, q } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Col, Container } from \"reactstrap\";\n\nfunction Dishes(_ref) {\n  _s();\n\n  var _this = this;\n\n  var restaurantID = _ref.restaurantID,\n      search = _ref.search;\n  var GET_RESTAURANT_DISHES = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restaurantID\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n\n  var _useContext = useContext(AppContext),\n      addItem = _useContext.addItem;\n\n  var router = useRouter();\n  var dishes = data.restaurant.data.attributes.dishes;\n  console.log(dishes);\n  var searchQuery = dishes.data.filter(function (res) {\n    return res.attributes.name.toLowerCase().includes(search);\n  }) || [];\n\n  if (searchQuery.length > 0) {\n    return __jsx(React.Fragment, null, searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        style: {\n          padding: 0\n        },\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 10px\",\n          height: \"100%\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }, __jsx(Container, {\n        style: {\n          display: \"flex\",\n          paddingLeft: \"0px\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 150,\n          width: 150\n        },\n        src: res.attributes.image.data[0].attributes.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }), __jsx(CardTitle, {\n        style: {\n          margin: \"20px 10px\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }\n      }, __jsx(\"h5\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 62\n        }\n      }, res.name), __jsx(\"h5\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 81\n        }\n      }, \"Price: \", __jsx(\"a\", {\n        style: {\n          color: \"#0d6efd\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 92\n        }\n      }, \"$\", res.price)))), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer text-end\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        outline: true,\n        color: \"primary\",\n        onClick: function onClick() {\n          return addItem(res);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 19\n        }\n      }, \"+ Add To Cart\"))));\n    }));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 12\n      }\n    }, \"No Dishes\");\n  }\n}\n\n_s(Dishes, \"/ZNhJw5wrGClpqDrMzi42egB5+w=\", false, function () {\n  return [useQuery, useRouter];\n});\n\n_c = Dishes;\nexport default Dishes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dishes\");","map":{"version":3,"sources":["/Users/chris/Bootcamp/Restaurant-App/frontend/components/dishes.js"],"names":["gql","useQuery","q","useRouter","useState","useContext","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Col","Container","Dishes","restaurantID","search","GET_RESTAURANT_DISHES","variables","id","loading","error","data","addItem","router","dishes","restaurant","attributes","console","log","searchQuery","filter","res","name","toLowerCase","includes","length","map","padding","margin","height","display","paddingLeft","width","image","url","color","price","description"],"mappings":"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","sourcesContent":["import { gql, useQuery, q } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n} from \"reactstrap\";\n\n\nfunction Dishes({ restaurantID, search }) {\n  \n\n  const GET_RESTAURANT_DISHES = gql`\n  query($id: ID!) {\n    restaurant(id: $id) {\n      data {\n        id\n        attributes {\n          name\n          dishes {\n            data {\n              id\n              attributes {\n                name\n                description\n                price\n                image {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restaurantID },\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  const { addItem } = useContext(AppContext);\n\n  const router = useRouter();\n\n  let dishes = data.restaurant.data.attributes.dishes;\n  console.log(dishes)\n  let searchQuery =\n    dishes.data.filter((res) => {\n      return res.attributes.name.toLowerCase().includes(search);\n    }) || [];\n\n  if (searchQuery.length > 0) {\n    return (\n      <>\n      \n          {searchQuery.map((res) => (\n            <Col xs=\"6\" sm=\"4\" style={{ padding: 0 }} key={res.id}>\n              <Card style={{ margin: \"0 10px\", height: \"100%\" }}>\n                <Container style={{ display: \"flex\", paddingLeft: \"0px\"}}>\n                <CardImg\n                  top={true}\n                  style={{ height: 150, width: 150 }}\n                  src={res.attributes.image.data[0].attributes.url}\n                />\n                  <CardTitle style={{ margin: \"20px 10px\" }}><h5>{res.name}</h5><h5>Price: <a style={{color: \"#0d6efd\"}}>${res.price}</a></h5></CardTitle>\n                </Container>\n                \n\n                <CardBody>\n                  <CardText>{res.description}</CardText>\n                </CardBody>\n                <div className=\"card-footer text-end\">\n                  <Button outline color=\"primary\" onClick={() => addItem(res)}>\n                    + Add To Cart\n                  </Button>\n                </div>\n              </Card>\n            </Col>\n          ))}\n      </>\n    );\n  } else {\n    return <h1>No Dishes</h1>;\n  }\n}\nexport default Dishes;\n"]},"metadata":{},"sourceType":"module"}