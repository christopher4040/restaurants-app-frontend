{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Bootcamp/Restaurant-App/frontend/components/restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\"; // import Dishes from \"./dishes\";\n\nimport { useContext, useEffect, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\nimport router, { useRouter } from \"next/router\";\n\nfunction RestaurantList(props) {\n  const {\n    restaurant,\n    setRestaurant,\n    dishes\n  } = useContext(AppContext);\n  console.log(dishes);\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(-1);\n  useEffect(() => {\n    if (Object.keys(restaurant).length > 0) {\n      window.localStorage.setItem(\"RESTAURANT\", JSON.stringify(restaurant));\n      router.push(\"/restaurant/\" + restaurant.id);\n    }\n  }, [restaurant]);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        data {\n          id\n          attributes {\n            name\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n\n  if (error) {\n    console.log(error);\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    }, \"Error fetching data\");\n  }\n\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log({\n    data\n  }); // let searchQuery =\n  //   data.restaurants.filter((res) => {\n  //     return res.name.toLowerCase().includes(props.search);\n  //   }) || [];\n\n  const handleRestaurant = res => {\n    // setRestaurantID(resID)\n    setRestaurant(res); // router.push(restaurantID)\n  }; // define renderer for Dishes\n  // const renderDishes = () => {\n  //   const { loadingDishes, errorDishes, dataDishes } = useQuery(GET_RESTAURANT_DISHES, {\n  //     variables: { id: restaurantID},\n  //   });\n  //   if (loadingDishes) return <p>Loading...</p>;\n  //   if (errorDishes) return <p>ERROR</p>;\n  //   if (!dataDishes) return <p>Not found dishes</p>;\n  //   console.log(`Dishes: ${dataDishes}`);\n  // };\n  // if (searchQuery.length > 0) {\n  //   const restList = searchQuery.map((res) => (\n  //     <Col style={{ textAlign: \"center\" }} xs=\"12\" sm=\"6\" lg=\"4\" key={res.id}>\n  //       <Button\n  //         onClick={() => {\n  //           handleRestaurant(res);\n  //           // setRestaurantID(res.id)\n  //         }}\n  //         className=\"p-0 border-0\"\n  //       >\n  //         <Card\n  //           color=\"light\"\n  //           style={{\n  //             minWidth: \"245px\",\n  //             maxWidth: \"275px\",\n  //           }}\n  //         >\n  //           <CardImg\n  //             top={true}\n  //             style={{ height: 200 }}\n  //             src={`http://localhost:1337` + res.image.url}\n  //           />\n  //           {/* <div className=\"card-footer text-center\">\n  //             <Button\n  //               color=\"primary\"\n  //               className=\"w-75\"\n  //               onClick={() => {\n  //                 setRestaurantID(res.id), toggle();\n  //               }}\n  //             >\n  //               {res.name}\n  //             </Button> */}\n  //           {/* <Modal isOpen={dishesModal} toggle={() => handleShowModal(false)}>\n  //               <ModalHeader toggle={() => handleShowModal(false)} close={closeBtn}>\n  //                 {rest.length != 0 ? rest[0].name : \"\"}\n  //               </ModalHeader>\n  //               <ModalBody>\n  //                 <span style={{ color: \"rgba(0,0,0,.6)\" }}>\n  //                   {rest.length != 0 ? rest[0].description : \"\"}\n  //                 </span>\n  //                 <br />\n  //                 <br />\n  //                 <Row xs=\"3\">{renderDishes(restaurantID)}</Row>\n  //               </ModalBody>\n  //             </Modal> */}\n  //           {/* </div> */}\n  //         </Card>\n  //       </Button>\n  //     </Col>\n  //   ));\n\n\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, restList), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  })); // } else {\n  //   return <h1> No Restaurants Found</h1>;\n  // }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["/Users/chris/Bootcamp/Restaurant-App/frontend/components/restaurantList.js"],"names":["gql","useQuery","useContext","useEffect","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","router","useRouter","RestaurantList","props","restaurant","setRestaurant","dishes","console","log","restaurantID","setRestaurantID","Object","keys","length","window","localStorage","setItem","JSON","stringify","push","id","GET_RESTAURANTS","GET_RESTAURANT_DISHES","loading","error","data","handleRestaurant","res","restList"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B,C,CACA;;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QAUO,YAVP;AAWA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,aAAlC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA;AAA7B,MAAwCnB,UAAU,CAACG,UAAD,CAAxD;AACAiB,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAM;AAAA,OAACG,YAAD;AAAA,OAAeC;AAAf,MAAkCrB,QAAQ,CAAC,CAAC,CAAF,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,MAAM,CAACC,IAAP,CAAYR,UAAZ,EAAwBS,MAAxB,GAAiC,CAArC,EAAwC;AACtCC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CC,IAAI,CAACC,SAAL,CAAed,UAAf,CAA1C;AACAJ,MAAAA,MAAM,CAACmB,IAAP,CAAY,iBAAiBf,UAAU,CAACgB,EAAxC;AACD;AACF,GALQ,EAKN,CAAChB,UAAD,CALM,CAAT;AAOA,QAAMiB,eAAe,GAAGpC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnBE;AAqBA,QAAMqC,qBAAqB,GAAGrC,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhBE;AAkBA,QAAM;AAAEsC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BvC,QAAQ,CAACmC,eAAD,CAAzC;AACA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACb,MAAIC,KAAJ,EAAW;AACTjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AACD,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACXlB,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACiB,IAAAA;AAAD,GAAZ,EA1D6B,CA4D7B;AACA;AACA;AACA;;AAEA,QAAMC,gBAAgB,GAAIC,GAAD,IAAS;AAChC;AACAtB,IAAAA,aAAa,CAACsB,GAAD,CAAb,CAFgC,CAGhC;AACD,GAJD,CAjE6B,CAuE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaC,QAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CAxI2B,CAiJ7B;AACA;AACA;AACD;;AACD,eAAe1B,cAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\n// import Dishes from \"./dishes\";\nimport { useContext, useEffect, useState } from \"react\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport router, { useRouter } from \"next/router\";\n\nfunction RestaurantList(props) {\n  const { restaurant, setRestaurant, dishes } = useContext(AppContext);\n  console.log(dishes);\n  const [restaurantID, setRestaurantID] = useState(-1);\n\n  useEffect(() => {\n    if (Object.keys(restaurant).length > 0) {\n      window.localStorage.setItem(\"RESTAURANT\", JSON.stringify(restaurant));\n      router.push(\"/restaurant/\" + restaurant.id);\n    }\n  }, [restaurant]);\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        data {\n          id\n          attributes {\n            name\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) {\n    console.log(error);\n    return <p>Error fetching data</p>;\n  }\n  if (!data) return <p>Not found</p>;\n  console.log({data});\n\n  // let searchQuery =\n  //   data.restaurants.filter((res) => {\n  //     return res.name.toLowerCase().includes(props.search);\n  //   }) || [];\n\n  const handleRestaurant = (res) => {\n    // setRestaurantID(resID)\n    setRestaurant(res);\n    // router.push(restaurantID)\n  };\n\n  // define renderer for Dishes\n  // const renderDishes = () => {\n  //   const { loadingDishes, errorDishes, dataDishes } = useQuery(GET_RESTAURANT_DISHES, {\n  //     variables: { id: restaurantID},\n  //   });\n  //   if (loadingDishes) return <p>Loading...</p>;\n  //   if (errorDishes) return <p>ERROR</p>;\n  //   if (!dataDishes) return <p>Not found dishes</p>;\n\n  //   console.log(`Dishes: ${dataDishes}`);\n  // };\n\n  // if (searchQuery.length > 0) {\n  //   const restList = searchQuery.map((res) => (\n  //     <Col style={{ textAlign: \"center\" }} xs=\"12\" sm=\"6\" lg=\"4\" key={res.id}>\n  //       <Button\n  //         onClick={() => {\n  //           handleRestaurant(res);\n  //           // setRestaurantID(res.id)\n  //         }}\n  //         className=\"p-0 border-0\"\n  //       >\n  //         <Card\n  //           color=\"light\"\n  //           style={{\n  //             minWidth: \"245px\",\n  //             maxWidth: \"275px\",\n  //           }}\n  //         >\n  //           <CardImg\n  //             top={true}\n  //             style={{ height: 200 }}\n  //             src={`http://localhost:1337` + res.image.url}\n  //           />\n\n  //           {/* <div className=\"card-footer text-center\">\n  //             <Button\n  //               color=\"primary\"\n  //               className=\"w-75\"\n  //               onClick={() => {\n  //                 setRestaurantID(res.id), toggle();\n  //               }}\n  //             >\n  //               {res.name}\n  //             </Button> */}\n\n  //           {/* <Modal isOpen={dishesModal} toggle={() => handleShowModal(false)}>\n  //               <ModalHeader toggle={() => handleShowModal(false)} close={closeBtn}>\n  //                 {rest.length != 0 ? rest[0].name : \"\"}\n  //               </ModalHeader>\n  //               <ModalBody>\n  //                 <span style={{ color: \"rgba(0,0,0,.6)\" }}>\n  //                   {rest.length != 0 ? rest[0].description : \"\"}\n  //                 </span>\n  //                 <br />\n  //                 <br />\n  //                 <Row xs=\"3\">{renderDishes(restaurantID)}</Row>\n  //               </ModalBody>\n  //             </Modal> */}\n  //           {/* </div> */}\n  //         </Card>\n  //       </Button>\n  //     </Col>\n  //   ));\n\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n        <br />\n        <br />\n        <br />\n        {/* <Row xs=\"3\">{renderDishes(restaurantID)}</Row> */}\n      </Container>\n    );\n  // } else {\n  //   return <h1> No Restaurants Found</h1>;\n  // }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}