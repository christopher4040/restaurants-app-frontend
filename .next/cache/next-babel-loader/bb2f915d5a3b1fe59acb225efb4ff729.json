{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Bootcamp/Restaurant-App/frontend/components/restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\"; // import Dishes from \"./dishes\";\n\nimport { useContext, useEffect, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\nimport router, { useRouter } from \"next/router\";\n\nfunction RestaurantList(props) {\n  const {\n    restaurant,\n    setRestaurant,\n    dishes\n  } = useContext(AppContext);\n  console.log(dishes);\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(-1);\n  useEffect(() => {\n    if (Object.keys(restaurant).length > 0) {\n      window.localStorage.setItem(\"RESTAURANT\", JSON.stringify(restaurant));\n      router.push(\"/restaurant/\" + restaurant.id);\n    }\n  }, [restaurant]);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        data {\n          id\n          attributes {\n            name\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n\n  if (error) {\n    console.log(error);\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    }, \"Error fetching data\");\n  }\n\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data}`);\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n\n  const handleRestaurant = res => {\n    // setRestaurantID(resID)\n    setRestaurant(res); // router.push(restaurantID)\n  }; // define renderer for Dishes\n  // const renderDishes = () => {\n  //   const { loadingDishes, errorDishes, dataDishes } = useQuery(GET_RESTAURANT_DISHES, {\n  //     variables: { id: restaurantID},\n  //   });\n  //   if (loadingDishes) return <p>Loading...</p>;\n  //   if (errorDishes) return <p>ERROR</p>;\n  //   if (!dataDishes) return <p>Not found dishes</p>;\n  //   console.log(`Dishes: ${dataDishes}`);\n  // };\n\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      style: {\n        textAlign: \"center\"\n      },\n      xs: \"12\",\n      sm: \"6\",\n      lg: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, __jsx(Button, {\n      onClick: () => {\n        handleRestaurant(res); // setRestaurantID(res.id)\n      },\n      className: \"p-0 border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, __jsx(Card, {\n      color: \"light\",\n      style: {\n        minWidth: \"245px\",\n        maxWidth: \"275px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    })))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, restList), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["/Users/chris/Bootcamp/Restaurant-App/frontend/components/restaurantList.js"],"names":["gql","useQuery","useContext","useEffect","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","router","useRouter","RestaurantList","props","restaurant","setRestaurant","dishes","console","log","restaurantID","setRestaurantID","Object","keys","length","window","localStorage","setItem","JSON","stringify","push","id","GET_RESTAURANTS","GET_RESTAURANT_DISHES","loading","error","data","searchQuery","restaurants","filter","res","name","toLowerCase","includes","search","handleRestaurant","restList","map","textAlign","minWidth","maxWidth","height","image","url"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B,C,CACA;;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QAUO,YAVP;AAWA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,aAAlC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA;AAA7B,MAAwCnB,UAAU,CAACG,UAAD,CAAxD;AACAiB,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAM;AAAA,OAACG,YAAD;AAAA,OAAeC;AAAf,MAAkCrB,QAAQ,CAAC,CAAC,CAAF,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,MAAM,CAACC,IAAP,CAAYR,UAAZ,EAAwBS,MAAxB,GAAiC,CAArC,EAAwC;AACtCC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CC,IAAI,CAACC,SAAL,CAAed,UAAf,CAA1C;AACAJ,MAAAA,MAAM,CAACmB,IAAP,CAAY,iBAAiBf,UAAU,CAACgB,EAAxC;AACD;AACF,GALQ,EAKN,CAAChB,UAAD,CALM,CAAT;AAOA,QAAMiB,eAAe,GAAGpC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnBE;AAqBA,QAAMqC,qBAAqB,GAAGrC,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhBE;AAkBA,QAAM;AAAEsC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BvC,QAAQ,CAACmC,eAAD,CAAzC;AACA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACb,MAAIC,KAAJ,EAAW;AACTjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AACD,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACXlB,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAciB,IAAK,EAAhC;AAEA,MAAIC,WAAW,GACbD,IAAI,CAACE,WAAL,CAAiBC,MAAjB,CAAyBC,GAAD,IAAS;AAC/B,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgC7B,KAAK,CAAC8B,MAAtC,CAAP;AACD,GAFD,KAEM,EAHR;;AAKA,QAAMC,gBAAgB,GAAIL,GAAD,IAAS;AAChC;AACAxB,IAAAA,aAAa,CAACwB,GAAD,CAAb,CAFgC,CAGhC;AACD,GAJD,CAjE6B,CAuE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,MAAIH,WAAW,CAACb,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,UAAMsB,QAAQ,GAAGT,WAAW,CAACU,GAAZ,CAAiBP,GAAD,IAC/B,MAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAEQ,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAqC,MAAA,EAAE,EAAC,IAAxC;AAA6C,MAAA,EAAE,EAAC,GAAhD;AAAoD,MAAA,EAAE,EAAC,GAAvD;AAA2D,MAAA,GAAG,EAAER,GAAG,CAACT,EAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AACE,MAAA,OAAO,EAAE,MAAM;AACbc,QAAAA,gBAAgB,CAACL,GAAD,CAAhB,CADa,CAEb;AACD,OAJH;AAKE,MAAA,SAAS,EAAC,cALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,MAAC,IAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,KAAK,EAAE;AACLS,QAAAA,QAAQ,EAAE,OADL;AAELC,QAAAA,QAAQ,EAAE;AAFL,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,MAAC,OAAD;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,GAAG,EAAG,uBAAD,GAA0BX,GAAG,CAACY,KAAJ,CAAUC,GAH3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAPF,CADF,CADe,CAAjB;AAoDA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaP,QAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AASD,GA9DD,MA8DO;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;AACF;;AACD,eAAejC,cAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\n// import Dishes from \"./dishes\";\nimport { useContext, useEffect, useState } from \"react\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport router, { useRouter } from \"next/router\";\n\nfunction RestaurantList(props) {\n  const { restaurant, setRestaurant, dishes } = useContext(AppContext);\n  console.log(dishes);\n  const [restaurantID, setRestaurantID] = useState(-1);\n\n  useEffect(() => {\n    if (Object.keys(restaurant).length > 0) {\n      window.localStorage.setItem(\"RESTAURANT\", JSON.stringify(restaurant));\n      router.push(\"/restaurant/\" + restaurant.id);\n    }\n  }, [restaurant]);\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        data {\n          id\n          attributes {\n            name\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) {\n    console.log(error);\n    return <p>Error fetching data</p>;\n  }\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data}`);\n\n  let searchQuery =\n    data.restaurants.filter((res) => {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n\n  const handleRestaurant = (res) => {\n    // setRestaurantID(resID)\n    setRestaurant(res);\n    // router.push(restaurantID)\n  };\n\n  // define renderer for Dishes\n  // const renderDishes = () => {\n  //   const { loadingDishes, errorDishes, dataDishes } = useQuery(GET_RESTAURANT_DISHES, {\n  //     variables: { id: restaurantID},\n  //   });\n  //   if (loadingDishes) return <p>Loading...</p>;\n  //   if (errorDishes) return <p>ERROR</p>;\n  //   if (!dataDishes) return <p>Not found dishes</p>;\n\n  //   console.log(`Dishes: ${dataDishes}`);\n  // };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col style={{ textAlign: \"center\" }} xs=\"12\" sm=\"6\" lg=\"4\" key={res.id}>\n        <Button\n          onClick={() => {\n            handleRestaurant(res);\n            // setRestaurantID(res.id)\n          }}\n          className=\"p-0 border-0\"\n        >\n          <Card\n            color=\"light\"\n            style={{\n              minWidth: \"245px\",\n              maxWidth: \"275px\",\n            }}\n          >\n            <CardImg\n              top={true}\n              style={{ height: 200 }}\n              src={`http://localhost:1337` + res.image.url}\n            />\n\n            {/* <div className=\"card-footer text-center\">\n              <Button\n                color=\"primary\"\n                className=\"w-75\"\n                onClick={() => {\n                  setRestaurantID(res.id), toggle();\n                }}\n              >\n                {res.name}\n              </Button> */}\n\n            {/* <Modal isOpen={dishesModal} toggle={() => handleShowModal(false)}>\n                <ModalHeader toggle={() => handleShowModal(false)} close={closeBtn}>\n                  {rest.length != 0 ? rest[0].name : \"\"}\n                </ModalHeader>\n                <ModalBody>\n                  <span style={{ color: \"rgba(0,0,0,.6)\" }}>\n                    {rest.length != 0 ? rest[0].description : \"\"}\n                  </span>\n                  <br />\n                  <br />\n                  <Row xs=\"3\">{renderDishes(restaurantID)}</Row>\n                </ModalBody>\n              </Modal> */}\n            {/* </div> */}\n          </Card>\n        </Button>\n      </Col>\n    ));\n\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n        <br />\n        <br />\n        <br />\n        {/* <Row xs=\"3\">{renderDishes(restaurantID)}</Row> */}\n      </Container>\n    );\n  } else {\n    return <h1> No Restaurants Found</h1>;\n  }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}